/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 100-lc.gltf --transform --instanceall -j -k 
Files: 100-lc.gltf [233.55KB] > /Users/williamfulton/Desktop/100-lc-transformed.glb [566.97KB] (-143%)
*/

import { PartNumberData } from "@/data";
import { useGLTF } from "@react-three/drei";

import { debounce } from "lodash";
import { Dispatch, SetStateAction, useCallback, useMemo } from "react";
import { InteractibleMesh, Nodes } from "./InteractibleMesh";

const randos = [
  6, 10, 13, 17, 19, 23, 25, 28, 29, 35, 41, 47, 53, 59, 60, 64, 70, 72, 75, 77, 79, 83, 85, 88, 89,
  92, 93, 94, 95, 99, 100, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 120, 121, 124,
  125, 128, 130, 133, 134, 136, 138, 139, 141, 148, 149, 154, 155, 156, 158, 159, 162, 163, 167,
  168, 172, 173, 177, 179, 183, 184, 185, 187, 191, 192, 196, 197, 201, 202, 206, 209, 210, 212,
  217, 221, 222, 226, 229, 230, 232, 237, 241, 242, 262, 263, 249, 250, 252, 255, 256, 257, 258,
  267, 271, 273, 279, 283, 285, 291, 292, 302, 304, 306, 309, 312, 316, 321, 326, 328, 332,
];

export function LandCruiser({
  selectedPartNumber,
  setSelectedPartNumber,
  hoveredPartNumber,
  setHoveredPartNumber,
  ...props
}: {
  selectedPartNumber?: string;
  setSelectedPartNumber: Dispatch<SetStateAction<string | undefined>>;
  [key: string]: any;
}) {
  const gltf = useGLTF("/100-lc.glb");
  const nodes: Nodes = gltf.nodes as Nodes;

  // return <primitive object={gltf.scene} {...props} />

  console.log(nodes);

  // paint
  // if (key === "hood") {
  //   applyProps(nodes[key].material, {
  //     envMapIntensity: 4,
  //     roughness: 0.5,
  //     metalness: 1,
  //     color: "#43423A",
  //   });
  // }

  // // glass
  // useEffect(() => {
  //   Object.values(nodes).forEach(
  //     (node) => node.isMesh && (node.receiveShadow = node.castShadow = true),
  //   );

  //   // Misc Parts
  //   applyProps(gltf.materials["PaletteMaterial001"], {
  //     envMapIntensity: 4,
  //     roughness: 0.8,
  //     metalness: 1,
  //     color: "black",
  //   });

  //   // Trim & Rubber
  //   applyProps(gltf.materials["PaletteMaterial002"], {
  //     color: "#64635B",
  //     roughness: 0,
  //     clearcoat: 0.1,
  //   });

  //   // Paint
  //   applyProps(gltf.materials["PaletteMaterial003"], {
  //     envMapIntensity: 4,
  //     envMaps: true,
  //     roughness: 0.1,
  //     metalness: 0.1,
  //     color: "#3f3f3c",
  //     vertexColors: true,

  //     sheenColor: "#3f3f3c",
  //     sheenRoughness: 0,
  //     sheen: 0.5,

  //     specularColor: "#3f3f3c",
  //     // attenuationColor: "#3f3f3c",
  //     clearcoat: 1,
  //     clearcoatRoughness: 0.15,
  //     // visible: false,
  //   });

  //   // Windows
  //   applyProps(gltf.materials["PaletteMaterial004"], {
  //     color: "#dbe1e3",
  //     roughness: 0,
  //     clearcoat: 0.1,
  //   });

  //   console.log(gltf.materials);
  // }, [gltf, nodes]);

  // // trim && rubber
  // if (key === "driver-front-rim" || key == "passenger-front-tire")
  //   applyProps(nodes[key].material, {
  //     color: "#5F646A",
  //     roughness: 0.6,
  //     roughnessMap: null,
  //     normalScale: [4, 4],
  //   });

  // Debounce hover a bit to stop the ticker from being erratic
  const debouncedHover = useCallback((partNumber?: string) => {
    const debounced = debounce(setHoveredPartNumber, 100);
    debounced(partNumber);
  }, []);

  const hoverProps = useMemo(
    () => ({
      nodes,
      selectedPartNumber,
      onPointerOver: (e: any, partNumber: string) => {
        e.stopPropagation();
        debouncedHover(partNumber);
        document.body.style.cursor = "pointer";
      },
      onPointerOut: () => {
        debouncedHover(undefined);
        document.body.style.cursor = "default";
      },
      onClick: (e: any, partNumber: string) => {
        e.stopPropagation();
        setSelectedPartNumber(partNumber);
      },
    }),
    [selectedPartNumber],
  );

  return (
    <>
      <group {...props} dispose={null}>
        {PartNumberData.map((data) => (
          <InteractibleMesh
            key={data.partNumber}
            partNumber={data.partNumber}
            keys={data.keys}
            {...hoverProps}
          />
        ))}

        {/* {randos.map((rando) => (
          <mesh
            key={rando}
            geometry={nodes[`Object_${rando}`].geometry}
            material={nodes[`Object_${rando}`].material}
            name={`Object_${rando}`}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={0.1}
          />
        ))} */}
      </group>
    </>
  );
}
