/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 100-lc.gltf --transform --instanceall -j -k 
Files: 100-lc.gltf [233.55KB] > /Users/williamfulton/Desktop/100-lc-transformed.glb [566.97KB] (-143%)
*/

import { PartNumberData } from "@/data";
import { Billboard, Text, useGLTF } from "@react-three/drei";

import { debounce } from "lodash";
import { Dispatch, SetStateAction, useCallback, useEffect, useState } from "react";
import { InteractibleMesh, Nodes } from "./InteractibleMesh";

const randos = [
  6, 10, 13, 17, 19, 23, 25, 28, 29, 35, 41, 47, 53, 59, 60, 64, 70, 72, 75, 77, 79, 83, 85, 88, 89,
  92, 93, 94, 95, 99, 100, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 120, 121, 124,
  125, 128, 130, 133, 134, 136, 138, 139, 141, 148, 149, 154, 155, 156, 158, 159, 162, 163, 167,
  168, 172, 173, 177, 179, 183, 184, 185, 187, 191, 192, 196, 197, 201, 202, 206, 209, 210, 212,
  217, 221, 222, 226, 229, 230, 232, 237, 241, 242, 262, 263, 249, 250, 252, 255, 256, 257, 258,
  267, 271, 273, 279, 283, 285, 291, 292, 302, 304, 306, 309, 312, 316, 321, 326, 328, 332,
];

export function LandCruiser({
  selectedPartNumber,
  setSelectedPartNumber,
  ...props
}: {
  selectedPartNumber?: string;
  setSelectedPartNumber: Dispatch<SetStateAction<string | undefined>>;
  [key: string]: any;
}) {
  const gltf = useGLTF("/100-lc-transformed.glb");
  const nodes: Nodes = gltf.nodes as Nodes;

  useEffect(() => {
    console.log("wbfulton", gltf);
  }, [gltf]);

  const [hovered, setHover] = useState<string>();
  // Debounce hover a bit to stop the ticker from being erratic
  const debouncedHover = useCallback((name?: string) => {
    const debounced = debounce(setHover, 100);
    debounced(name);
  }, []);

  const over = useCallback(
    (name: string) => (e: any) => (e.stopPropagation(), debouncedHover(name)),
    [],
  );

  const hoverProps = useCallback(
    (name: string) => ({
      nodes,
      selectedPartNumber,
      onPointerOver: (e: any) => {
        over(name)(e);
      },
      onPointerOut: () => debouncedHover(undefined),
      onClick: (e: any, key: string) => {
        e.stopPropagation();
        setSelectedPartNumber(key);
      },
    }),
    [selectedPartNumber],
  );

  return (
    <>
      <Billboard
        follow={true}
        lockX={false}
        lockY={false}
        lockZ={false} // Lock the rotation on the z axis (default=false)
        renderOrder={100}>
        <Text
          position={[20, 10, 20]} // base position on mesh
          color="#384147"
          // outlineColor="#f4f0e8"
          // outlineBlur={1}
          // outlineWidth={0.5}
          fontSize={1}
          font="Inter-Regular.woff"
          letterSpacing={-0.05}>
          {hovered ? hovered : ""}
        </Text>
      </Billboard>

      <group {...props} dispose={null}>
        {PartNumberData.map((data) => (
          <InteractibleMesh
            key={data.partNumber}
            partNumber={data.partNumber}
            keys={data.keys}
            {...hoverProps(data.label)}
          />
        ))}

        {randos.map((rando) => (
          <mesh
            geometry={nodes[`Object_${rando}`].geometry}
            material={nodes[`Object_${rando}`].material}
            name={`Object_${rando}`}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={0.1}
          />
        ))}
      </group>
    </>
  );
}
